<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Cosmos EVM Faucet - Token Distribution</title>
    <link rel="icon" href="https://ping.pub/favicon.ico" />
    <meta name="robots" content="index, follow">
    <meta name="description" content="Cosmos EVM Devnet Faucet - Request tokens to either address.">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
      :root {
        --cosmos-primary: #2e2e54;
        --cosmos-secondary: #5064fb;
        --cosmos-accent: #00d2ff;
        --cosmos-gradient: linear-gradient(135deg, #2e2e54 0%, #5064fb 50%, #00d2ff 100%);
      }

      @media (prefers-color-scheme: dark) {
        :root {
          --bg-primary: #0d1117;
          --bg-secondary: #161b22;
          --text-primary: #f0f6fc;
          --text-secondary: #8b949e;
          --border-color: #30363d;
        }
      }

      @media (prefers-color-scheme: light) {
        :root {
          --bg-primary: #ffffff;
          --bg-secondary: #f6f8fa;
          --text-primary: #24292f;
          --text-secondary: #656d76;
          --border-color: #d0d7de;
        }
      }

      body {
        background: var(--bg-primary);
        color: var(--text-primary);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      .header {
        background: var(--bg-secondary);
        border-bottom: 1px solid var(--border-color);
        padding: 1rem 0;
        margin-bottom: 2rem;
      }

      .container {
        max-width: 800px;
      }

      .card {
        border: 1px solid var(--border-color);
        border-radius: 12px;
        background: var(--bg-secondary);
        margin-bottom: 2rem;
      }

      .card-header {
        background: var(--bg-secondary);
        color: var(--text-primary);
        border-bottom: 1px solid var(--border-color);
        border-radius: 12px 12px 0 0;
        padding: 1.25rem;
        font-weight: 600;
      }

      .form-control {
        background: var(--bg-primary);
        border: 1px solid var(--border-color);
        color: var(--text-primary);
        border-radius: 8px;
      }

      .form-control:focus {
        border-color: var(--cosmos-accent);
        box-shadow: 0 0 0 3px rgba(0, 210, 255, 0.1);
        background: var(--bg-primary);
        color: var(--text-primary);
      }

      .btn-primary {
        background: var(--cosmos-gradient);
        border: none;
        border-radius: 8px;
        font-weight: 500;
      }

      .btn-primary:hover {
        background: var(--cosmos-gradient);
        transform: translateY(-1px);
      }

      .nav-tabs {
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 2rem;
      }

      .nav-tabs .nav-link {
        color: var(--text-secondary);
        border: none;
        border-radius: 0;
        padding: 1rem 1.5rem;
        font-weight: 500;
        border-bottom: 2px solid transparent;
      }

      .nav-tabs .nav-link.active {
        color: var(--cosmos-accent);
        background: transparent;
        border-bottom-color: var(--cosmos-accent);
      }

      .info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
      }

      @media (max-width: 768px) {
        .info-grid {
          grid-template-columns: 1fr;
        }
      }

      .info-card {
        background: var(--bg-secondary);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 1.5rem;
      }

      .info-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .info-item {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--border-color);
      }

      .info-item:last-child {
        border-bottom: none;
      }

      .info-label {
        font-weight: 500;
        color: var(--text-secondary);
        font-size: 0.875rem;
        min-width: 100px;
      }

      .info-value {
        font-family: ui-monospace, 'SF Mono', Monaco, monospace;
        font-size: 0.8rem;
        color: var(--text-primary);
        word-break: break-all;
        text-align: right;
        flex: 1;
        margin-left: 1rem;
      }

      .alert {
        border-radius: 8px;
        border: 1px solid;
        padding: 1rem;
        margin-bottom: 1rem;
      }

      .alert-success {
        background-color: rgba(25, 135, 84, 0.1);
        border-color: rgba(25, 135, 84, 0.2);
        color: var(--text-primary);
      }

      .alert-danger {
        background-color: rgba(220, 53, 69, 0.1);
        border-color: rgba(220, 53, 69, 0.2);
        color: var(--text-primary);
      }

      .alert-warning {
        background-color: rgba(255, 193, 7, 0.1);
        border-color: rgba(255, 193, 7, 0.2);
        color: var(--text-primary);
      }

      .loading-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: -0.125em;
        border: 0.125em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
      }

      @keyframes spinner-border {
        to {
          transform: rotate(360deg);
        }
      }

      .balance-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--border-color);
      }

      .balance-item:last-child {
        border-bottom: none;
      }

      .balance-label {
        font-weight: 500;
        color: var(--text-secondary);
        font-size: 0.875rem;
      }

      .balance-value {
        font-weight: 600;
        color: var(--text-primary);
        font-family: ui-monospace, 'SF Mono', Monaco, monospace;
      }

      .transaction-item {
        padding: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        margin-bottom: 1rem;
        background: var(--bg-primary);
      }

      .transaction-item:last-child {
        margin-bottom: 0;
      }

      .text-success {
        color: #198754 !important;
      }

      .text-danger {
        color: #dc3545 !important;
      }

      .bg-success {
        background-color: #198754 !important;
      }

      .bg-danger {
        background-color: #dc3545 !important;
      }
    </style>
  </head>
  <body>
    <div id="app">
      <div class="header">
        <div class="container">
          <h1 class="h3 mb-0"><%= project.name %></h1>
        </div>
      </div>

      <div class="container">
        <!-- Tabs -->
        <ul class="nav nav-tabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="faucet-tab" data-bs-toggle="tab" data-bs-target="#faucet" type="button" role="tab">
              <i class="fas fa-faucet me-2"></i>Token Faucet
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="watom-tab" data-bs-toggle="tab" data-bs-target="#watom" type="button" role="tab">
              <i class="fas fa-exchange-alt me-2"></i>WATOM Wrap/Unwrap
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="recent-tab" data-bs-toggle="tab" data-bs-target="#recent" type="button" role="tab">
              <i class="fas fa-history me-2"></i>Recent Txs
              <span v-if="recentTransactions.length" class="badge bg-primary ms-1">{{recentTransactions.length}}</span>
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="network-tab" data-bs-toggle="tab" data-bs-target="#network" type="button" role="tab">
              <i class="fas fa-network-wired me-2"></i>Network Info
            </button>
          </li>
        </ul>

        <div class="tab-content">
          <!-- Faucet Tab -->
          <div class="tab-pane fade show active" id="faucet" role="tabpanel">
            <!-- Token Request -->
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-faucet me-2"></i>Request Tokens</h5>
              </div>
              <div class="card-body">
                <p class="text-muted mb-3">Enter your wallet address to receive test tokens.</p>
                
                <div class="input-group mb-3">
                  <input
                    id="address"
                    class="form-control"
                    placeholder="Enter Cosmos (cosmos...) or EVM (0x...) address"
                    v-model="address"
                  >
                  <button
                    type="button"
                    class="btn btn-primary"
                    @click="requestToken()"
                    :disabled="!isValidAddress || isLoading"
                  >
                    <span v-if="isLoading" class="loading-spinner me-2"></span>
                    <i v-else class="fas fa-paper-plane me-2"></i>
                    {{isLoading ? 'Sending...' : 'Request Tokens'}}
                  </button>
                </div>

                <div v-if="addressType && addressType !== 'Invalid'" class="text-center">
                  <span class="badge bg-primary">
                    <i :class="addressType === 'Cosmos' ? 'fas fa-atom' : 'fab fa-ethereum'"></i>
                    {{addressType}} Address Detected
                  </span>
                </div>
              </div>
            </div>

            <div id="message" v-html="message"></div>

            <!-- Balances -->
            <div class="info-grid">
              <!-- Requester Wallet -->
              <div class="info-card">
                <h5 class="info-title">
                  <i class="fas fa-user-circle"></i>
                  Requester Wallet
                </h5>
                <div v-if="requesterBalances && requesterBalances.length">
                  <div v-for="balance in requesterBalances" :key="balance.denom" class="balance-item">
                    <span class="balance-label">{{balance.denom}}</span>
                    <span class="balance-value">{{formatBalance(balance.amount, balance.decimals)}}</span>
                  </div>
                </div>
                <div v-else-if="address && isValidAddress" class="text-center text-muted">
                  <div class="loading-spinner me-2"></div> Loading balances...
                </div>
                <div v-else class="text-center text-muted">
                  Enter a valid address to view balances
                </div>
              </div>

              <!-- Faucet Wallet -->
              <div class="info-card">
                <h5 class="info-title">
                  <i class="fas fa-faucet"></i>
                  Faucet Wallet
                </h5>
                <div v-if="faucetBalances && faucetBalances.length">
                  <div v-for="balance in faucetBalances" :key="balance.denom + balance.type" class="balance-item">
                    <span class="balance-label">{{balance.denom}} ({{balance.type}})</span>
                    <span class="balance-value">{{formatBalance(balance.amount, balance.decimals)}}</span>
                  </div>
                </div>
                <div v-else class="text-center text-muted">
                  <div class="loading-spinner me-2"></div> Loading faucet balances...
                </div>
              </div>
            </div>
          </div>

          <!-- WATOM Wrap/Unwrap Tab -->
          <div class="tab-pane fade" id="watom" role="tabpanel">
            <div class="card">
              <div class="card-header">
                <i class="fas fa-exchange-alt me-2"></i>
                WATOM Wrapping & Unwrapping
              </div>
              <div class="card-body">
                <div class="row">
                  <!-- Wrap ATOM → WATOM -->
                  <div class="col-md-6">
                    <div class="card h-100">
                      <div class="card-header bg-primary text-white">
                        <i class="fas fa-arrow-right me-2"></i>Wrap ATOM → WATOM
                      </div>
                      <div class="card-body">
                        <p class="text-muted small mb-3">Convert native ATOM tokens into WATOM (wrapped ATOM) ERC20 tokens</p>
                        <div class="mb-3">
                          <label class="form-label">Amount to Wrap</label>
                          <div class="input-group">
                            <input 
                              type="number" 
                              class="form-control" 
                              v-model="wrapAmount" 
                              placeholder="0.00"
                              step="0.000001"
                              min="0"
                            >
                            <span class="input-group-text">ATOM</span>
                          </div>
                          <div class="form-text">Balance: {{formatBalance(nativeBalance, 6)}} ATOM</div>
                        </div>
                        <button 
                          class="btn btn-primary w-100" 
                          @click="wrapAtom"
                          :disabled="isWrapping || !wrapAmount || parseFloat(wrapAmount) <= 0"
                        >
                          <span v-if="isWrapping" class="loading-spinner me-2"></span>
                          {{isWrapping ? 'Wrapping...' : 'Wrap ATOM'}}
                        </button>
                      </div>
                    </div>
                  </div>

                  <!-- Unwrap WATOM → ATOM -->
                  <div class="col-md-6">
                    <div class="card h-100">
                      <div class="card-header bg-secondary text-white">
                        <i class="fas fa-arrow-left me-2"></i>Unwrap WATOM → ATOM
                      </div>
                      <div class="card-body">
                        <p class="text-muted small mb-3">Convert WATOM ERC20 tokens back into native ATOM tokens</p>
                        <div class="mb-3">
                          <label class="form-label">Amount to Unwrap</label>
                          <div class="input-group">
                            <input 
                              type="number" 
                              class="form-control" 
                              v-model="unwrapAmount" 
                              placeholder="0.00"
                              step="0.000001"
                              min="0"
                            >
                            <span class="input-group-text">WATOM</span>
                          </div>
                          <div class="form-text">Balance: {{formatBalance(watomBalance, 6)}} WATOM</div>
                        </div>
                        <button 
                          class="btn btn-secondary w-100" 
                          @click="unwrapAtom"
                          :disabled="isUnwrapping || !unwrapAmount || parseFloat(unwrapAmount) <= 0"
                        >
                          <span v-if="isUnwrapping" class="loading-spinner me-2"></span>
                          {{isUnwrapping ? 'Unwrapping...' : 'Unwrap WATOM'}}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- WATOM Info -->
                <div class="card mt-4">
                  <div class="card-header">
                    <i class="fas fa-info-circle me-2"></i>About WATOM
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-8">
                        <p class="mb-2">
                          <strong>WATOM</strong> is a wrapped version of the native ATOM token that follows the ERC20 standard.
                          This allows ATOM to be used in ERC20-compatible contracts and applications.
                        </p>
                        <ul class="list-unstyled small text-muted">
                          <li>• 1 ATOM = 1 WATOM (always)</li>
                          <li>• Wrapping/unwrapping is permissionless</li>
                          <li>• Gas fees apply for transactions</li>
                          <li>• Uses the native WERC20 precompile</li>
                        </ul>
                      </div>
                      <div class="col-md-4">
                        <div class="text-center">
                          <div class="mb-2">
                            <strong>WATOM Contract</strong>
                          </div>
                          <div class="text-monospace small" style="word-break: break-all;">
                            {{watomContractAddress}}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Recent WATOM Transactions -->
                <div v-if="watomTransactions.length" class="card mt-4">
                  <div class="card-header">
                    <i class="fas fa-list me-2"></i>Recent WATOM Transactions
                  </div>
                  <div class="card-body">
                    <div v-for="tx in watomTransactions" :key="tx.hash" class="transaction-item">
                      <div class="d-flex justify-content-between align-items-center">
                        <div>
                          <span class="badge" :class="tx.type === 'wrap' ? 'bg-primary' : 'bg-secondary'">
                            {{tx.type === 'wrap' ? 'Wrap' : 'Unwrap'}}
                          </span>
                          <span class="ms-2">{{tx.amount}} {{tx.type === 'wrap' ? 'ATOM → WATOM' : 'WATOM → ATOM'}}</span>
                        </div>
                        <div class="text-end">
                          <div class="small text-muted">{{formatDate(tx.timestamp)}}</div>
                          <a :href="getExplorerUrl(tx.hash)" target="_blank" class="small">
                            View <i class="fas fa-external-link-alt"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Recent Transactions Tab -->
          <div class="tab-pane fade" id="recent" role="tabpanel">
            <div v-if="recentTransactions.length" class="info-card">
              <h5 class="info-title">
                <i class="fas fa-history"></i>
                Recent Transactions
              </h5>
              <div v-for="(tx, index) in recentTransactions" :key="tx.id" class="transaction-item">
                <div class="d-flex justify-content-between align-items-start">
                  <div class="flex-grow-1">
                    <div class="d-flex align-items-center gap-2 mb-2">
                      <i :class="tx.success ? 'fas fa-check-circle text-success' : 'fas fa-exclamation-triangle text-danger'"></i>
                      <span class="fw-bold">{{tx.addressType}} Transaction</span>
                      <span class="badge" :class="tx.success ? 'bg-success' : 'bg-danger'">
                        {{tx.success ? 'Success' : 'Failed'}}
                      </span>
                      <small class="text-muted">{{formatDate(tx.timestamp)}}</small>
                    </div>
                    <div class="mb-2">
                      <strong>To:</strong> 
                      <span class="text-monospace">{{tx.address}}</span>
                    </div>
                    <div v-if="tx.hash" class="mb-2">
                      <strong>Hash:</strong> 
                      <span class="text-monospace small">{{tx.hash}}</span>
                    </div>
                  </div>
                  <div class="text-end">
                    <button class="btn btn-outline-secondary btn-sm" @click="showTransactionDetails(tx)">
                      <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-outline-danger btn-sm ms-1" @click="removeTransaction(index)">
                      <i class="fas fa-trash"></i>
                    </button>
                  </div>
                </div>
              </div>
              <div class="text-center mt-3">
                <button class="btn btn-outline-secondary btn-sm" @click="clearAllTransactions()">
                  <i class="fas fa-trash me-2"></i>Clear All
                </button>
              </div>
            </div>
            <div v-else class="info-card text-center">
              <h5 class="info-title justify-content-center">
                <i class="fas fa-history"></i>
                Recent Transactions
              </h5>
              <p class="text-muted">No recent transactions yet.</p>
            </div>
          </div>

          <!-- Network Info Tab -->
          <div class="tab-pane fade" id="network" role="tabpanel">
            <div class="info-grid">
              <!-- Cosmos Network -->
              <div class="info-card">
                <h5 class="info-title">
                  <i class="fas fa-atom"></i>
                  Cosmos Network
                </h5>
                <div class="info-item">
                  <span class="info-label">Chain ID:</span>
                  <span class="info-value">{{ networkConfig.cosmos?.chainId || 'Loading...' }}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">RPC:</span>
                  <span class="info-value">{{ networkConfig.cosmos?.rpc || 'Loading...' }}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">gRPC:</span>
                  <span class="info-value">{{ networkConfig.cosmos?.grpc || 'Loading...' }}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">REST:</span>
                  <span class="info-value">{{ networkConfig.cosmos?.rest || 'Loading...' }}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Faucet:</span>
                  <span class="info-value">{{ sampleAddresses.cosmos }}</span>
                </div>
              </div>

              <!-- EVM Network -->
              <div class="info-card">
                <h5 class="info-title">
                  <i class="fab fa-ethereum"></i>
                  EVM Network
                </h5>
                <div class="info-item">
                  <span class="info-label">Chain ID:</span>
                  <span class="info-value">{{ networkConfig.evm?.chainId || 'Loading...' }} ({{ networkConfig.evm?.chainIdHex || '0x...' }})</span>
                </div>
                <div class="info-item">
                  <span class="info-label">RPC:</span>
                  <span class="info-value">{{ networkConfig.evm?.rpc || 'Loading...' }}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">WebSocket:</span>
                  <span class="info-value">{{ networkConfig.evm?.websocket || 'Loading...' }}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Compatible:</span>
                  <span class="info-value">Ethereum JSON-RPC</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Faucet:</span>
                  <span class="info-value">{{ sampleAddresses.evm }}</span>
                </div>
              </div>
            </div>

            <!-- Contract Addresses -->
            <div v-if="networkConfig.contracts && Object.keys(networkConfig.contracts).length" class="info-card mt-3">
              <h5 class="info-title">
                <i class="fas fa-file-contract"></i>
                Contract Addresses
              </h5>
              <div class="info-item" v-for="(address, name) in networkConfig.contracts" :key="name">
                <span class="info-label">{{ name }}:</span>
                <span class="info-value">{{ address }}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script type="module">
      import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'
      
      createApp({
        data() {
          return {
            message: '',
            address: '',
            conf: {},
            sampleAddresses: { cosmos: '', evm: '' },
            networkConfig: { 
              cosmos: { chainId: '', rpc: '', grpc: '', rest: '' }, 
              evm: { chainId: '', chainIdHex: '', rpc: '', websocket: '' }, 
              contracts: {} 
            },
            requesterBalances: [],
            faucetBalances: [],
            recentTransactions: [],
            isLoading: false,
            selectedTransaction: null,
            // WATOM related data
            wrapAmount: '',
            unwrapAmount: '',
            nativeBalance: '0',
            watomBalance: '0',
            isWrapping: false,
            isUnwrapping: false,
            watomTransactions: [],
            watomContractAddress: '0x0000000000000000000000000000000000000802' // WERC20 precompile address
          }
        },
        created() {
          fetch("/config.json").then(response => response.json()).then(data => {
            this.conf = data
            this.sampleAddresses = data.sample || { cosmos: '', evm: '' }
            if (data.network) {
              this.networkConfig = data.network
            }
            this.loadFaucetBalances();
            this.loadRecentTransactions();
            this.loadWatomTransactions();
            this.loadWatomBalances();
          }).catch(error => {
            console.error('Failed to load config:', error);
          });
        },
        watch: {
          address: {
            handler(newAddress) {
              if (newAddress && this.isValidAddress) {
                this.loadRequesterBalances();
              } else {
                this.requesterBalances = [];
              }
            },
            immediate: false
          }
        },
        computed: {
          addressType() {
            if (!this.address) return null;
            if (/^0x[a-fA-F0-9]{40}$/.test(this.address)) return 'EVM';
            if (this.address.startsWith('cosmos')) return 'Cosmos';
            return 'Invalid';
          },
          isValidAddress() {
            return this.addressType === 'EVM' || this.addressType === 'Cosmos';
          }
        },
        methods: {
          async loadFaucetBalances() {
            try {
              const [cosmosResponse, evmResponse] = await Promise.all([
                fetch('/balance/cosmos').then(r => r.json()).catch(() => ({ balances: [] })),
                fetch('/balance/evm').then(r => r.json()).catch(() => ({ balances: [] }))
              ]);
              
              const faucetBalances = [];
              
              if (cosmosResponse.balances) {
                cosmosResponse.balances.forEach(balance => {
                  faucetBalances.push({
                    ...balance,
                    type: 'cosmos'
                  });
                });
              }
              
              if (evmResponse.balances) {
                evmResponse.balances.forEach(balance => {
                  faucetBalances.push({
                    ...balance,
                    type: balance.type === 'native' ? 'evm-native' : 'evm-erc20'
                  });
                });
              }
              
              this.faucetBalances = faucetBalances;
            } catch (e) {
              console.error('Failed to load faucet balances:', e);
            }
          },
          
          async loadRequesterBalances() {
            if (!this.address || !this.isValidAddress) {
              this.requesterBalances = [];
              return;
            }
            
            try {
              if (this.addressType === 'Cosmos') {
                const response = await fetch(`/balance/cosmos?address=${this.address}`);
                const data = await response.json();
                this.requesterBalances = data.balances || [];
              } else if (this.addressType === 'EVM') {
                const response = await fetch(`/balance/evm?address=${this.address}`);
                const data = await response.json();
                this.requesterBalances = data.balances || [];
              }
            } catch (e) {
              console.error('Failed to load requester balances:', e);
              this.requesterBalances = [];
            }
          },
          
          formatBalance(amount, decimals = 0) {
            if (!amount) return '0';
            const num = BigInt(amount);
            if (decimals > 0) {
              const divisor = BigInt(10 ** decimals);
              const whole = num / divisor;
              const fraction = num % divisor;
              if (fraction === 0n) {
                return whole.toString();
              } else {
                const fractionStr = fraction.toString().padStart(decimals, '0').replace(/0+$/, '');
                return `${whole.toString()}.${fractionStr}`;
              }
            }
            return num.toLocaleString();
          },
          
          async requestToken() {
            if (!this.isValidAddress) {
              this.message = `
                <div class="alert alert-warning">
                  <h6><i class="fas fa-exclamation-circle me-2"></i>Invalid Address</h6>
                  <p class="mb-0">Please enter a valid Cosmos (cosmos...) or EVM (0x...) address</p>
                </div>`
              return;
            }

            // Clear previous message and show loading
            this.message = `
              <div class="alert alert-info">
                <h6><i class="fas fa-clock me-2"></i>Processing Transaction</h6>
                <div class="d-flex align-items-center">
                  <div class="loading-spinner me-2"></div>
                  <span>Sending tokens to ${this.addressType} address...</span>
                </div>
              </div>`

            this.isLoading = true;
            
            try {
              const response = await fetch(`/send/${this.address}`);
              const data = await response.json();
              
              const isSuccess = data.result && (data.result.code === 0 || data.result.transactions);
              
              // Add transaction to recent list
              this.addTransactionToHistory({
                address: this.address,
                addressType: this.addressType,
                success: isSuccess,
                data: data,
                hash: isSuccess ? (data.result.hash || data.result.transactions?.[0]) : null,
                timestamp: new Date()
              });
              
              await Promise.all([
                this.loadFaucetBalances(),
                this.loadRequesterBalances()
              ]);

              this.message = `
                <div class="alert alert-${isSuccess ? 'success': 'danger'} alert-dismissible show fade" role="alert">
                    <h6 class="alert-heading">
                      <i class="fas fa-${isSuccess ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                      ${isSuccess ? 'Tokens Sent Successfully!' : 'Request Failed'}
                    </h6>
                    <p class="mb-2"><strong>Address Type:</strong> ${this.addressType}</p>
                    <p class="mb-0 small text-muted">Transaction details saved to Recent Txs tab.</p>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
              `
            } catch (err) {
              // Add failed transaction to history
              this.addTransactionToHistory({
                address: this.address,
                addressType: this.addressType,
                success: false,
                data: { error: err.message },
                hash: null,
                timestamp: new Date()
              });
              
              this.message = `
                <div class="alert alert-danger">
                  <h6><i class="fas fa-exclamation-triangle me-2"></i>Network Error</h6>
                  <p class="mb-0">${err.message}</p>
                </div>`
            } finally {
              this.isLoading = false;
            }
          },

          loadRecentTransactions() {
            const saved = localStorage.getItem('faucet-recent-transactions');
            if (saved) {
              try {
                this.recentTransactions = JSON.parse(saved).map(tx => ({
                  ...tx,
                  timestamp: new Date(tx.timestamp)
                }));
              } catch (e) {
                console.error('Failed to load recent transactions:', e);
                this.recentTransactions = [];
              }
            }
          },

          saveRecentTransactions() {
            localStorage.setItem('faucet-recent-transactions', JSON.stringify(this.recentTransactions));
          },

          addTransactionToHistory(tx) {
            tx.id = Date.now() + Math.random();
            this.recentTransactions.unshift(tx);
            
            // Keep only last 10 transactions
            if (this.recentTransactions.length > 10) {
              this.recentTransactions = this.recentTransactions.slice(0, 10);
            }
            
            this.saveRecentTransactions();
          },

          removeTransaction(index) {
            this.recentTransactions.splice(index, 1);
            this.saveRecentTransactions();
          },

          clearAllTransactions() {
            this.recentTransactions = [];
            this.saveRecentTransactions();
          },

          showTransactionDetails(tx) {
            this.selectedTransaction = tx;
            this.message = `
              <div class="alert alert-info alert-dismissible show fade" role="alert">
                <h6 class="alert-heading">
                  <i class="fas fa-info-circle me-2"></i>Transaction Details
                </h6>
                <pre class="mt-2 p-3 rounded" style="background: var(--bg-primary); border: 1px solid var(--border-color); font-size: 0.8rem; overflow-x: auto;"><code>${JSON.stringify(tx.data, null, 2)}</code></pre>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            `
          },

          formatDate(date) {
            return new Intl.DateTimeFormat('en-US', {
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            }).format(date);
          },

          // WATOM wrapping/unwrapping methods
          async loadWatomBalances() {
            if (!window.ethereum) {
              console.warn('MetaMask not detected');
              return;
            }

            try {
              const accounts = await window.ethereum.request({ method: 'eth_accounts' });
              if (!accounts.length) return;

              const userAddress = accounts[0];
              
              // Get native balance
              const nativeBalance = await window.ethereum.request({
                method: 'eth_getBalance',
                params: [userAddress, 'latest']
              });
              this.nativeBalance = parseInt(nativeBalance, 16).toString();

              // Get WATOM balance
              const watomBalance = await this.getERC20Balance(this.watomContractAddress, userAddress);
              this.watomBalance = watomBalance;

            } catch (error) {
              console.error('Error loading WATOM balances:', error);
            }
          },

          async getERC20Balance(tokenAddress, userAddress) {
            const balanceOfData = '0x70a08231' + userAddress.slice(2).padStart(64, '0');
            try {
              const result = await window.ethereum.request({
                method: 'eth_call',
                params: [{
                  to: tokenAddress,
                  data: balanceOfData
                }, 'latest']
              });
              return parseInt(result, 16).toString();
            } catch (error) {
              console.error('Error getting ERC20 balance:', error);
              return '0';
            }
          },

          async wrapAtom() {
            if (!window.ethereum) {
              alert('Please install MetaMask to use WATOM wrapping');
              return;
            }

            if (!this.wrapAmount || parseFloat(this.wrapAmount) <= 0) {
              alert('Please enter a valid amount to wrap');
              return;
            }

            this.isWrapping = true;

            try {
              const accounts = await window.ethereum.request({ method: 'eth_accounts' });
              if (!accounts.length) {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const newAccounts = await window.ethereum.request({ method: 'eth_accounts' });
                if (!newAccounts.length) {
                  throw new Error('Please connect your wallet');
                }
              }

              const amountWei = (parseFloat(this.wrapAmount) * 1000000).toString(); // Convert to 6 decimal wei

              // Call deposit function on WERC20 precompile
              const txHash = await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [{
                  from: accounts[0],
                  to: this.watomContractAddress,
                  value: '0x' + parseInt(amountWei).toString(16),
                  data: '0xd0e30db0' // deposit() function selector
                }]
              });

              this.addWatomTransaction({
                type: 'wrap',
                amount: this.wrapAmount,
                hash: txHash,
                timestamp: new Date()
              });

              this.wrapAmount = '';
              await this.loadWatomBalances();

              alert(`Successfully wrapped ${this.wrapAmount} ATOM! Transaction: ${txHash}`);

            } catch (error) {
              console.error('Wrap error:', error);
              alert('Failed to wrap ATOM: ' + error.message);
            } finally {
              this.isWrapping = false;
            }
          },

          async unwrapAtom() {
            if (!window.ethereum) {
              alert('Please install MetaMask to use WATOM unwrapping');
              return;
            }

            if (!this.unwrapAmount || parseFloat(this.unwrapAmount) <= 0) {
              alert('Please enter a valid amount to unwrap');
              return;
            }

            this.isUnwrapping = true;

            try {
              const accounts = await window.ethereum.request({ method: 'eth_accounts' });
              if (!accounts.length) {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const newAccounts = await window.ethereum.request({ method: 'eth_accounts' });
                if (!newAccounts.length) {
                  throw new Error('Please connect your wallet');
                }
              }

              const amountWei = (parseFloat(this.unwrapAmount) * 1000000).toString(); // Convert to 6 decimal wei

              // Call withdraw function on WERC20 precompile
              const withdrawData = '0x2e1a7d4d' + parseInt(amountWei).toString(16).padStart(64, '0'); // withdraw(uint256)

              const txHash = await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [{
                  from: accounts[0],
                  to: this.watomContractAddress,
                  data: withdrawData
                }]
              });

              this.addWatomTransaction({
                type: 'unwrap',
                amount: this.unwrapAmount,
                hash: txHash,
                timestamp: new Date()
              });

              this.unwrapAmount = '';
              await this.loadWatomBalances();

              alert(`Successfully unwrapped ${this.unwrapAmount} WATOM! Transaction: ${txHash}`);

            } catch (error) {
              console.error('Unwrap error:', error);
              alert('Failed to unwrap WATOM: ' + error.message);
            } finally {
              this.isUnwrapping = false;
            }
          },

          addWatomTransaction(tx) {
            this.watomTransactions.unshift(tx);
            if (this.watomTransactions.length > 10) {
              this.watomTransactions = this.watomTransactions.slice(0, 10);
            }
            localStorage.setItem('watomTransactions', JSON.stringify(this.watomTransactions));
          },

          loadWatomTransactions() {
            const stored = localStorage.getItem('watomTransactions');
            if (stored) {
              this.watomTransactions = JSON.parse(stored);
            }
          },

          getExplorerUrl(txHash) {
            return `${this.networkConfig.evm.explorer || 'https://cevm-01-explorer.dev.skip.build'}/tx/${txHash}`;
          }
        }
      }).mount('#app')
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
  </body>
</html>