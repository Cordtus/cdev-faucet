{
  "evm_protobuf_modules": {
    "overview": "Cosmos SDK EVM integration modules providing Ethereum Virtual Machine functionality with full Web3 compatibility",
    "modules": {
      "crypto": {
        "module_path": "cosmos.evm.crypto.v1.ethsecp256k1",
        "purpose": "Ethereum-compatible secp256k1 cryptographic key support",
        "transaction_methods": [],
        "query_methods": [],
        "message_types": {
          "PubKey": {
            "fields": {
              "key": "bytes - 33-byte compressed secp256k1 public key"
            },
            "description": "Ethereum secp256k1 public key for address derivation and signature verification"
          },
          "PrivKey": {
            "fields": {
              "key": "bytes - 32-byte secp256k1 private key"
            },
            "description": "Ethereum secp256k1 private key for transaction signing"
          }
        },
        "usage": "Address derivation via Keccak256 hash, ECDSA signature operations, EIP-155 transaction signing"
      },
      "erc20": {
        "module_path": "cosmos.evm.erc20.v1",
        "purpose": "Bidirectional conversion between Cosmos SDK native coins and ERC20 tokens",
        "transaction_methods": {
          "ConvertERC20": {
            "fields": {
              "contract_address": "string - ERC20 contract address (0x...)",
              "amount": "string - Amount in wei (math.Int as string)",
              "receiver": "string - Bech32 cosmos address",
              "sender": "string - Ethereum hex address (0x...)"
            },
            "description": "Converts ERC20 tokens to Cosmos native coins",
            "example": {
              "contract_address": "0x1234567890123456789012345678901234567890",
              "amount": "1000000000000000000",
              "receiver": "cosmos1abc123def456...",
              "sender": "0xabcdef1234567890abcdef1234567890abcdef12"
            }
          },
          "ConvertCoin": {
            "fields": {
              "coin": "cosmos.base.v1beta1.Coin - Cosmos coin with denom and amount",
              "receiver": "string - Ethereum hex address (0x...)",
              "sender": "string - Bech32 cosmos address"
            },
            "description": "Converts Cosmos native coins to ERC20 tokens"
          },
          "UpdateParams": {
            "fields": {
              "authority": "string - Governance module account",
              "params": "Params - New parameters"
            },
            "description": "Updates module parameters via governance proposal"
          },
          "RegisterERC20": {
            "fields": {
              "signer": "string - Proposer address",
              "erc20addresses": "repeated string - ERC20 contract addresses"
            },
            "description": "Registers ERC20 contracts for conversion via governance"
          },
          "ToggleConversion": {
            "fields": {
              "authority": "string - Governance module account",
              "token": "string - Token identifier (contract address or denom)"
            },
            "description": "Enables or disables token conversion for specific tokens"
          }
        },
        "query_methods": {
          "TokenPairs": "Query all registered token pairs with pagination",
          "TokenPair": "Query specific token pair by identifier",
          "Params": "Query module parameters"
        },
        "events": ["EventRegisterPair", "EventToggleTokenConversion", "EventConvertCoin", "EventConvertERC20"],
        "key_types": {
          "TokenPair": "ERC20-Cosmos token mapping with enabled status and ownership",
          "Allowance": "ERC20 allowance for precompile contract",
          "Params": "Module configuration parameters"
        }
      },
      "feemarket": {
        "module_path": "cosmos.evm.feemarket.v1",
        "purpose": "EIP-1559 dynamic fee market implementation with base fee calculation",
        "transaction_methods": {
          "UpdateParams": {
            "fields": {
              "authority": "string - Governance module account",
              "params": "Params - New feemarket parameters"
            },
            "description": "Updates feemarket parameters via governance proposal"
          }
        },
        "query_methods": {
          "Params": "Get feemarket parameters",
          "BaseFee": "Get current EIP-1559 base fee per gas",
          "BlockGas": "Get gas used at specific block height"
        },
        "core_params": {
          "no_base_fee": "bool - Disable base fee calculation",
          "base_fee_change_denominator": "uint32 - Base fee adjustment rate (default: 8)",
          "elasticity_multiplier": "uint32 - Gas limit elasticity (default: 2)",
          "enable_height": "int64 - Height to enable fee market",
          "base_fee": "string - Initial base fee (wei)",
          "min_gas_price": "string - Minimum gas price",
          "min_gas_multiplier": "string - Minimum gas price multiplier"
        },
        "fee_calculation": "Base fee adjusts automatically based on network congestion using EIP-1559 formula"
      },
      "precisebank": {
        "module_path": "cosmos.evm.precisebank.v1",
        "purpose": "Precise fractional balance tracking for sub-unit denomination precision",
        "transaction_methods": [],
        "query_methods": {
          "Remainder": "Get total unbacked fractional amount in system",
          "FractionalBalance": "Get account's fractional balance"
        },
        "precision": "10^18 fractional units per full unit (similar to wei in Ethereum)",
        "use_cases": ["Micro-transactions", "DeFi Operations", "Cross-chain Transfers", "Fee Calculations"],
        "key_types": {
          "FractionalBalance": {
            "address": "string - Account address",
            "amount": "string - Fractional amount (math.Int as string)"
          }
        }
      },
      "types": {
        "module_path": "cosmos.evm.types.v1",
        "purpose": "Common data structures and utilities for EVM integration",
        "extension_options": {
          "ExtensionOptionDynamicFeeTx": {
            "max_priority_price": "string - Maximum priority fee per gas (wei)",
            "usage": "EIP-1559 max priority fee specification for transactions"
          },
          "ExtensionOptionsWeb3Tx": {
            "typed_data_chain_id": "uint64 - Chain ID for EIP-712 typed data",
            "fee_payer": "string - Alternative fee payer address",
            "fee_payer_sig": "bytes - Fee payer signature",
            "usage": "Web3 and MetaMask compatibility features, meta-transactions"
          }
        },
        "indexing": {
          "TxResult": {
            "height": "int64 - Block height",
            "tx_index": "uint32 - Transaction index in block",
            "msg_index": "uint32 - Message index in transaction",
            "eth_tx_index": "int32 - Ethereum-specific transaction index",
            "failed": "bool - Transaction failure status",
            "gas_used": "uint64 - Gas consumed by transaction",
            "cumulative_gas_used": "uint64 - Cumulative gas used in block"
          }
        },
        "features": ["EIP-1559 dynamic fees", "EIP-712 typed data", "Meta-transactions", "JSON-RPC compatibility"]
      },
      "vm": {
        "module_path": "cosmos.evm.vm.v1",
        "purpose": "Core Ethereum Virtual Machine functionality for transaction execution and smart contracts",
        "transaction_methods": {
          "EthereumTx": {
            "data": "google.protobuf.Any - Transaction data (LegacyTx/AccessListTx/DynamicFeeTx)",
            "hash": "string - Transaction hash",
            "from": "string - Sender address",
            "supported_types": {
              "LegacyTx": "Pre-EIP-2930 transactions with gas_price",
              "AccessListTx": "EIP-2930 access list transactions",
              "DynamicFeeTx": "EIP-1559 dynamic fee transactions with gas_tip_cap and gas_fee_cap"
            }
          },
          "UpdateParams": {
            "authority": "string - Governance module account",
            "params": "Params - New VM parameters"
          }
        },
        "query_methods": {
          "Account": "Get Ethereum account info",
          "CosmosAccount": "Get Cosmos address from Ethereum address",
          "Balance": "Get EVM denomination balance",
          "Storage": "Get contract storage value",
          "Code": "Get contract bytecode",
          "EthCall": "Execute eth_call RPC",
          "EstimateGas": "Execute eth_estimateGas RPC",
          "TraceTx": "Execute debug_traceTransaction RPC",
          "TraceBlock": "Execute debug_traceBlock RPC",
          "BaseFee": "Get EIP-1559 base fee",
          "Config": "Get EVM chain configuration"
        },
        "rpc_compatibility": "Full Ethereum JSON-RPC support through query methods",
        "features": ["Contract deployment", "Contract calls", "Transaction tracing", "Gas estimation", "State queries"]
      }
    },
    "integration_notes": {
      "transaction_flow": "Ethereum transactions via MsgEthereumTx in VM module, token conversions via ERC20 module, fee market integration",
      "cross_module_dependencies": "VM uses feemarket for gas pricing, ERC20 interacts with VM for contracts, precisebank handles fractional precision",
      "web3_compatibility": "Full Web3 provider compatibility via extension options and query methods"
    }
  }
}